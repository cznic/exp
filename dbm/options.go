// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package dbm

/*
import (
	"crypto/sha1"
	"fmt"
	"io"
	"path/filepath"
)

// OptACID is the type of the Options.ACID field.
type OptACID int

const (
	// Disable 2PC/WAL/recovery.
	ACIDDisableWAL OptACID = 1 << iota

	// DB updates will be made without using structural transactions.
	// Implies ACIDDisableWAL.
	ACIDDisableStructuralTransactions
)

// Options are passed to the DB create/open functions to amend the behavior of
// those functions. The compatibility promise is the same as of struct types in
// the Go standard library - introducing changes can be made only by adding new
// exported fields, which is backward compatible as long as client code uses
// field names to assign values of imported struct types literals.
//
// NOTE: By "updates" bellow is meant any operation on the DB which writes to
// it.  Read operations in dbm DBs MAY write to the DB, so they're "updates"
// too.
//
// ACID values
//
// Updates to dbm DBs are considered to be always "consistent" as there is no
// schema/constraints to violate by an update - from the dbm point of view.
// Updates to the DB are isolated regardless of the value of the ACID field.
//
// Valid values and their effects.
//
//	Default (zero) value
//
// DB will use 2PC, WAL, automatic crash recovery and automatic rollbacks on
// update failures. Updates to the DB will be ACID. Recommended value for a DB
// backed by a disk file.
//
//	ACIDDisableWAL
//
// DB will not use 2PC, WAL and automatic crash recovery. DB will use automatic
// rollbacks on update failures.  Updates to the DB will not be durable in the
// case of a crash and the DB may get corrupted by a crash.  Not a recommended
// value to use.  Possibly might be OK for some DBs with easy to reproduce data
// like for example small configurations DBs, object files generated by a
// compiler etc.
//
//	ACIDDisableStructuralTransactions // or
//	ACIDDisableStructuralTransactions | ACIDDisableWAL // the same
//
// DB will not use 2PC, WAL and automatic crash recovery. DB will not use
// automatic rollbacks on update failures. Updates to the DB will not be
// durable in the case of crash and the DB may get corrupted by a crash.
// Updates to the DB will not be atomic; an failed update (eg. a diks write
// error) may corrupt the DB.  Recommended value for DBs backed only by memory.
//
// Write Ahead Log
//
// The WAL pathname. May be left empty in which case an unspecified pathname
// will be chosen, which is computed from the DB name and which will be in the
// same directory as the DB. Moving or renaming the DB while it is shut down
// will break it's connection to the automatically computed name. Moving both
// the files into another directory with no renaming is safe.
//
// On opening an existing DB the WAL file must exist if it should be used (see
// the values of the ACID field). If it is of zero size then a clean shutdown
// of the DB is assumed, otherwise an automatic DB recovery is performed.
//
// On creating a new DB the WAL file must not exist. It's not safe to write to
// a non zero sized WAL file as it may contain unprocessed DB recovery data.
type Options struct {
	ACID OptACID
	WAL  string
}

func walName(dbname, wal string) (r string) {
	if wal != "" {
		return filepath.Clean(wal)
	}

	base := filepath.Base(filepath.Clean(dbname))

	h := sha1.New()
	io.WriteString(h, base)
	return filepath.Join(filepath.Dir(dbname), fmt.Sprintf(".%x", h.Sum(nil)))
}
*/
